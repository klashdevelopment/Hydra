{
  "js": "// Fill with .tile elements inside .row elements.\n// Each tile should store their color inside --bg\n// and should change upon click.\nconst centerDiv = document.querySelector('.center-box');\n\n// Setup prompting\nfunction newFile() {\n    centerDiv.innerHTML = `<div class=\"row nobg\">\n        <code>WIDTH</code>\n        <input type=\"number\" max=\"100\" min=\"1\" id=\"width-input\" value=\"8\">\n    </div>\n    <div class=\"row nobg\">\n        <code>HEIGHT</code>\n        <input type=\"number\" max=\"100\" min=\"1\" id=\"height-input\" value=\"8\">\n    </div>\n    <div class=\"row nobg\">\n        <button id=\"begin\">LETS DRAW</button>\n    </div>`;\n    var widthInp = document.querySelector('#width-input'),\n        heightInp = document.querySelector('#height-input'),\n        startButton = document.querySelector('#begin');\n    startButton.addEventListener('click', () => {\n        var width = parseInt(widthInp.value);\n        var height = parseInt(heightInp.value);\n        onStart(width, height);\n    });\n}\n\nconst [\n    pencilTool, // one pixel\n    fillTool, // fill\n    eyeDropper, // pick color\n    marker, // 3x3 size\n    eraser // set to transparent\n] = [...document.querySelectorAll('.right-box i')];\nconst colorPicker = document.querySelector('#color');\n\n// Global variables\nlet currentTool = 'pencil'; // Default tool\nlet currentColor = '#11ddff'; // Default color\n\n// Set up tool selection\n[pencilTool, fillTool, eyeDropper, marker, eraser].forEach((tool, index) => {\n    const toolNames = ['pencil', 'fill', 'eyedropper', 'marker', 'eraser'];\n    tool.addEventListener('click', () => {\n        currentTool = toolNames[index];\n        // Remove active class from all tools\n        [pencilTool, fillTool, eyeDropper, marker, eraser].forEach(t => t.classList.remove('active'));\n        // Add active class to selected tool\n        tool.classList.add('active');\n    });\n});\n\n// Set up color picker\ncolorPicker.addEventListener('input', () => {\n    currentColor = colorPicker.value;\n});\n\nfunction onStart(width, height) {\n    // Validate dimensions\n    width = Math.min(Math.max(1, parseInt(width) || 16), 100);\n    height = Math.min(Math.max(1, parseInt(height) || 16), 100);\n\n    // Clear out the centerDiv\n    centerDiv.innerHTML = '';\n\n    // Fill with rows and tiles\n    for (let y = 0; y < height; y++) {\n        const row = document.createElement('div');\n        row.className = 'row';\n\n        for (let x = 0; x < width; x++) {\n            const tile = document.createElement('div');\n            tile.className = 'tile';\n            tile.style.setProperty('--bg', 'transparent');\n            tile.dataset.x = x;\n            tile.dataset.y = y;\n\n            // Add event listeners for drawing\n            tile.addEventListener('click', (e) => handleTileClick(e, x, y));\n\n            // Optional: Add drag functionality\n            tile.addEventListener('mouseenter', (e) => {\n                if (e.buttons === 1) { // Left mouse button is pressed\n                    handleTileClick(e, x, y);\n                }\n            });\n\n            row.appendChild(tile);\n        }\n\n        centerDiv.appendChild(row);\n    }\n}\n\nfunction handleTileClick(event, x, y) {\n    const grid = Array.from(document.querySelectorAll('.row')).map(row =>\n        Array.from(row.querySelectorAll('.tile'))\n    );\n\n    switch (currentTool) {\n        case 'pencil':\n            event.target.style.setProperty('--bg', currentColor);\n            break;\n\n        case 'marker':\n            // 3x3 brush\n            for (let dy = -1; dy <= 1; dy++) {\n                for (let dx = -1; dx <= 1; dx++) {\n                    const newY = y + dy;\n                    const newX = x + dx;\n\n                    // Check bounds\n                    if (newY >= 0 && newY < grid.length &&\n                        newX >= 0 && newX < grid[0].length) {\n                        grid[newY][newX].style.setProperty('--bg', currentColor);\n                    }\n                }\n            }\n            break;\n\n        case 'eraser':\n            event.target.style.setProperty('--bg', 'transparent');\n            break;\n\n        case 'eyedropper':\n            const color = event.target.style.getPropertyValue('--bg');\n            if (color && color !== 'transparent') {\n                currentColor = color;\n                colorPicker.value = color;\n            }\n            break;\n\n        case 'fill':\n            const targetColor = event.target.style.getPropertyValue('--bg');\n            floodFill(grid, x, y, targetColor, currentColor);\n            break;\n    }\n}\n\nfunction floodFill(grid, x, y, targetColor, replacementColor) {\n    // Check bounds\n    if (y < 0 || y >= grid.length || x < 0 || x >= grid[0].length) {\n        return;\n    }\n\n    const currentTile = grid[y][x];\n    const currentColor = currentTile.style.getPropertyValue('--bg');\n\n    // Stop if we're at a different color or already filled\n    if (currentColor !== targetColor || currentColor === replacementColor) {\n        return;\n    }\n\n    // Fill the current pixel\n    currentTile.style.setProperty('--bg', replacementColor);\n\n    // Recursively fill neighbors (4-way connectivity)\n    floodFill(grid, x + 1, y, targetColor, replacementColor);\n    floodFill(grid, x - 1, y, targetColor, replacementColor);\n    floodFill(grid, x, y + 1, targetColor, replacementColor);\n    floodFill(grid, x, y - 1, targetColor, replacementColor);\n}\n\nfunction exportDoc() {\n    const grid = Array.from(document.querySelectorAll('.row')).map(row =>\n        Array.from(row.querySelectorAll('.tile'))\n    );\n\n    // Map to store color to character mapping\n    const colorMap = new Map();\n    let nextChar = 'A';\n\n    // Reverse map to check if color already has a character\n    const reverseColorMap = {};\n\n    // Create the array of strings representation\n    const result = grid.map(row => {\n        return row.map(tile => {\n            const color = tile.style.getPropertyValue('--bg') || 'transparent';\n\n            if (color === 'transparent') {\n                return ' '; // Use space for transparent\n            }\n\n            if (reverseColorMap[color]) {\n                return reverseColorMap[color];\n            }\n\n            // Assign next character to this color\n            const char = nextChar;\n            reverseColorMap[color] = char;\n            colorMap.set(char, color);\n\n            // Update next character (A-Z, then a-z, then 0-9)\n            if (nextChar === 'Z') {\n                nextChar = 'a';\n            } else if (nextChar === 'z') {\n                nextChar = '0';\n            } else if (nextChar === '9') {\n                // If we run out of characters, start using combinations\n                nextChar = 'A0';\n            } else {\n                // Increment the character\n                if (nextChar.length === 1) {\n                    nextChar = String.fromCharCode(nextChar.charCodeAt(0) + 1);\n                } else {\n                    // Handle multi-character codes\n                    const lastChar = nextChar[nextChar.length - 1];\n                    if (lastChar === '9') {\n                        nextChar = nextChar.slice(0, -1) + '0';\n                    } else {\n                        nextChar = nextChar.slice(0, -1) +\n                            String.fromCharCode(lastChar.charCodeAt(0) + 1);\n                    }\n                }\n            }\n\n            return char;\n        }).join('');\n    });\n\n    // Convert Map to object for the final output\n    const colorObject = {};\n    colorMap.forEach((value, key) => {\n        colorObject[key] = value;\n    });\n\n    return [result, colorObject];\n}\n\nfunction exportToPNG() {\n    // Get the dimensions of the grid\n    const grid = Array.from(document.querySelectorAll('.row'));\n    const height = grid.length;\n    const width = grid[0].querySelectorAll('.tile').length;\n\n    // Create a canvas element with the appropriate size\n    const canvas = document.createElement('canvas');\n    const tileSize = 10; // Size of each pixel in the output image\n    canvas.width = width * tileSize;\n    canvas.height = height * tileSize;\n\n    // Get the 2D drawing context\n    const ctx = canvas.getContext('2d');\n\n    // Fill the canvas with a white background (optional)\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw each pixel from the grid onto the canvas\n    grid.forEach((row, y) => {\n        Array.from(row.querySelectorAll('.tile')).forEach((tile, x) => {\n            const color = tile.style.getPropertyValue('--bg');\n\n            // Only draw non-transparent pixels\n            if (color && color !== 'transparent') {\n                ctx.fillStyle = color;\n                ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);\n            }\n        });\n    });\n\n    // Convert the canvas to a data URL and trigger download\n    try {\n        const dataURL = canvas.toDataURL('image/png');\n\n        // Create a download link\n        const link = document.createElement('a');\n        link.download = 'pixel-art.png';\n        link.href = dataURL;\n\n        // Trigger the download\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n\n        return dataURL;\n    } catch (error) {\n        console.error('Error exporting to PNG:', error);\n        return null;\n    }\n}\n\nconst exportHydra = document.querySelector(\"#hydra-export\");\nconst exportPNG = document.querySelector(\"#png-export\");\nconst newFileBtn = document.querySelector(\"#new-file\");\nconst cancelExport = document.querySelector('#cancel-export');\nconst exportButton = document.querySelector('#export-show');\n\nfunction changeExport(val) {\n    return ()=>{\n        if (val) { document.querySelector('.export').classList.remove('hidden') }\n        if (!val) { document.querySelector('.export').classList.add('hidden') }\n    }\n}\n\nnewFileBtn.addEventListener('click', newFile);\nexportButton.addEventListener('click', changeExport(true));\ncancelExport.addEventListener('click', changeExport(false));\nexportPNG.addEventListener('click', exportToPNG);\nexportHydra.addEventListener('click', ()=>{\n    const val = exportDoc();\n    alert(JSON.stringify(val));\n});\n\n// Hover text\nconst hovText = document.querySelector('.hover-text');\nfunction updateHoverPos(mX, mY) {\n    if(mX > document.body.clientWidth/2) {\n        mX -= hovText.clientWidth+15;\n    }else {\n        mX += 20;\n    }\n    mY -= 10;\n    hovText.style.left = `${mX}px`;\n    hovText.style.top = `${mY}px`;\n}\ndocument.querySelectorAll('i').forEach(icon => {\n    if(icon.dataset['hoverText']) {\n        icon.addEventListener('mouseenter', () => {\n            hovText.style.display = 'flex';\n            hovText.innerText = icon.dataset['hoverText'];\n        });\n        icon.addEventListener('mouseleave', () => {\n            hovText.style.display = 'none';\n        });\n        icon.addEventListener('mousemove', (e) => { updateHoverPos(e.clientX, e.clientY); });\n    }\n})",
  "css": "@import url(\"https://site-assets.fontawesome.com/releases/v6.6.0/css/all.css\");\n@import url(\"https://rsms.me/inter/inter.css\");\nhtml, body {\n    background: black;\n    color: white;\n    width: 100vw;\n    height: 100vh;\n    margin: 0;\n    vertical-align: baseline;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: row;\n    gap: 5px;\n    font-family: Inter;\n}\ndiv.basic {\n    padding: 4px;\n    border-radius: 4px;\n    min-width: 40px;\n    background: #222229;\n    height: calc(100% - 20px);\n    border: 2px solid rgb(70, 70, 104);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n    flex-direction: column;\n}\n.right-box {\n    font-size: 24px;\n    gap: 12px;\n    color: rgb(148, 228, 255);\n}\ni.active {\n    color: rgb(11, 165, 165);\n}\n.color-box {\n    width: 30px;\n    position: relative;\n    height: 30px;\n    overflow: hidden;\n    border-radius: 6px;\n    border: 3px solid black;\n}\n#color {\n    border: none;\n    outline: none;\n    padding: 0;\n    width: calc(100% + 12px);\n    height: calc(100% + 12px);\n    position: absolute;\n    top: -6px;\n    left: -6px;\n}\n.row {\n    width: fit-content;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #ffffff20;\n}\n.tile {\n    display: inline-flex;\n    width: 20px;\n    height: 20px;\n    background: var(--bg);\n}\n.center-box {\n    width: 100%;\n}\n.left-box {\n    margin-left: 5px;\n    font-size: 24px;\n    gap: 12px;\n    color: rgb(148, 255, 214);\n}\ncode {\n    font-family: mono, JetBrains Mono, monospace;\n    margin-right: 4px;\n}\ninput[type=\"number\"], button {\n    background: #111119;\n    border: 2px solid #ffffff30;\n    border-radius: 6px;\n    padding: 3px;\n    color: #ccc;\n    font-family: mono, JetBrains Mono, monospace;\n}\nbutton i {\n    margin-right: 5px;\n    color: lightblue;\n    font-size: 14px;\n}\ninput[type=\"number\"]:focus-within {\n    outline: none;\n}\nbutton {\n    padding: 6px 14px;\n    color: white;\n    font-family: Inter;\n    font-weight: 800;\n    background: #11111190;\n}\n.export {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: #11ddff30;\n    backdrop-filter: blur(8px);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: row;\n    gap: 4px;\n}\n.left-exp {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    gap: 2px;\n}\n\n.hidden {\n    display: none !important;\n}\n.hover-text {\n    align-items: center;\n    justify-content: center;\n    background: #00000070;\n    position: absolute;\n    width: fit-content;\n    max-width: 100vw;\n    padding: 6px 10px;\n    border-radius: 4px;\n    border: 2px solid rgb(70, 70, 104);\n    backdrop-filter: blur(5px);\n    box-shadow: 0px 0px 9px 1px black;\n    z-index: 99;\n}\n.nobg {\n    background: transparent !important;\n    margin: 1px 0;\n}",
  "html": "<div class=\"left-box basic\">\n    <i class=\"fa-solid fa-plus\" id=\"new-file\" data-hover-text=\"New File\"></i>\n    <i class=\"fa-solid fa-download\" id=\"export-show\" data-hover-text=\"Export\"></i>\n</div>\n<div class=\"center-box basic\">\n    <i class=\"fa-solid fa-image\" style=\"font-size:30px;margin-bottom:5px;\"></i> No active image\n</div>\n<div class=\"right-box basic\">\n    <i class=\"fa-solid fa-pencil active\" data-hover-text=\"1x1 Pencil\"></i>\n    <i class=\"fa-solid fa-fill\" data-hover-text=\"Fill\"></i>\n    <i class=\"fa-solid fa-eyedropper\" data-hover-text=\"Colorpicker\"></i>\n    <i class=\"fa-solid fa-marker\" data-hover-text=\"3x3 Marker\"></i>\n    <i class=\"fa-solid fa-eraser\" data-hover-text=\"Eraser\"></i>\n    <div class=\"color-box\">\n        <input type=\"color\" value=\"#11ddff\" id=\"color\" />\n    </div>\n</div>\n<div class=\"export hidden\">\n    <div class=\"left-exp\">\n        <b>EXPORT YOUR DRAWING</b>\n        <button id=\"cancel-export\"><i class=\"fa-solid fa-circle-x\"></i>Cancel Export</button>\n        <button id=\"hydra-export\"><i class=\"fa-solid fa-code\"> </i>Export to Hydra</button>\n        <button id=\"png-export\"><i class=\"fa-solid fa-download\"></i>Export to PNG</button>\n    </div>\n</div>\n\n<div class=\"hover-text\" style=\"display:none;\"></div>",
  "settings": {
    "cssImports": [],
    "jsImports": [],
    "color": "#6955c6",
    "borderWidth": 1,
    "title": "Quadpad Export",
    "shareCodeWithBrainbase": true
  }
}