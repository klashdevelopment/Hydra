{
  "js": "let left = document.querySelector('#left');\r\nlet right = document.querySelector('#right');\r\n\r\nfunction add(text) {\r\n    right.value += text;\r\n}\r\n\r\nfunction translate() {\r\n    right.value = 'const lib = new HydraCanvasLib(\\'game\\');\\n\\n';\r\n    let leftVal = left.value.split('\\n');\r\n    var emergencyEnd = false;\r\n    var error = (text)=>{\r\n        emergencyEnd = true;\r\n        right.value='(Error): ' + text;\r\n    }\r\n    leftVal.forEach(lvRaw => {\r\n        var lv = lvRaw.trim();\r\n        if(emergencyEnd) return;\r\n        if(lv.startsWith('--')) {\r\n            return add(`//${lv.split('--')[1]}\\n`);\r\n        }else if(lv.trim().length == 0) {\r\n            return add(`\\n`);\r\n        }\r\n        let type = lv.split(' ')[0];\r\n        switch(type.toLowerCase()) {\r\n            case \"renderer\":\r\n                var name = lv.split(' ')[1];\r\n                var renderLine = lv.substring(10+name.length);\r\n                var renderToCode = (r)=>{\r\n                    var type = r.split(',')[0];\r\n                    return `SimpleRenderers.${type}(${r.substring(type.length+1)})`;\r\n                }\r\n                var finalCode = ``;\r\n                if(renderLine.includes('|')) {\r\n                    var codeParts = renderLine.split('|').map((rLi,_i)=>renderToCode(rLi));\r\n                    finalCode = 'SimpleRenderers.combination(\\n' + codeParts.join(',\\n') + '\\n)';\r\n                }else {\r\n                    finalCode = renderToCode(renderLine);\r\n                }\r\n                add(`const r${name} = ${finalCode};\\n`)\r\n                break;\r\n            case \"sprite\":\r\n                let spriteName = lv.split('sprite \"')[1].split('\"')[0];\r\n                let rName = lv.split(' with renderer ')[1].split(' ')[0];\r\n                let pos = lv.split(' at ')[1].split(',');\r\n                add(`const ${spriteName} = lib.sprites.createNew(${pos[0]}, ${pos[1]}, r${rName});\\n`);\r\n                break;\r\n            case \"effect\":\r\n                let effect = lv.split(' ')[1];\r\n                let modifier = lv.split(' ')[2];\r\n                if(modifier == \"enabled\" || modifier == \"disabled\") {\r\n                    add(`lib.world.effects.${effect}.enabled = ${modifier=='enabled'?true:false};\\n`);\r\n                }else {\r\n                    let value = lv.split(`${modifier} `)[1];\r\n                    add(`lib.world.effects.${effect}.${modifier} = ${value};\\n`);\r\n                }\r\n                break;\r\n            case \"sound\":\r\n                let action = lv.split(' ')[1];\r\n                let varname = lv.split(' ')[2];\r\n                if(action == 'make') {\r\n                    let filename = lv.split('\"')[1].substring(-1);\r\n                    add(`var ${varname} = lib.sounds.createSFX(\"${filename}\");\\n`)\r\n                }else if(['play','pause','stop'].includes(action)) {\r\n                    add(`${varname}.${action}();\\n`)\r\n                }\r\n                break;\r\n            case \"startloop\":\r\n                add(\"lib.listen.addTicker((deltaTime) => {\\n\");\r\n                break;\r\n            case \"endloop\":\r\n                add(\"});\\n\");\r\n                break;\r\n            case \"ifkey\":\r\n                let key = lv.split(' ')[1];\r\n                if (!key) return error('No HTML Key specified in ifkey statement');\r\n                add(`if(lib.listen.isKey(\"${key}\")){\\n`)\r\n                break;\r\n            case \"endif\":\r\n                add('}\\n');\r\n                break;\r\n            case \"custom\":\r\n                var str = lv.replace('custom ', '');\r\n                add(str+'\\n');\r\n                break;\r\n            case \"add\":\r\n                var amount = lv.split(' ')[1];\r\n                var to = lv.split(' to ')[1].replaceAll('>', '.').replaceAll('\\'s ', '.').replaceAll(' > ', '.');\r\n                add(`${to} += ${amount};`);\r\n                break;\r\n            case \"subtract\":\r\n                var amount = lv.split(' ')[1];\r\n                var to = lv.split(' from ')[1].replaceAll('>', '.').replaceAll('\\'s ', '.').replaceAll(' > ', '.');\r\n                add(`${to} -= ${amount};`);\r\n                break;\r\n        }\r\n    })\r\n    if(emergencyEnd) return;\r\n    add(`lib.loop(60);\\n`);\r\n    right.value = js_beautify(right.value);\r\n}\r\ntranslate();\r\nleft.addEventListener('input', translate);",
  "css": "/* CSS */\nhtml, body {\n    background: #222;\n    color: white;\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0;\n    margin: 0;\n    vertical-align: baseline;\n    gap: 6px;\n}\ntextarea {\n    width: calc(50% - 8px);\n    height: calc(100% - 12px);\n    box-sizing: border-box;\n    resize: none;\n    background: #0a0a0d;\n    border: none;\n    border-radius: 6px;\n    color: white;\n}\ntextarea:focus-within {\n    outline: none;\n}",
  "html": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.15.4/beautify.min.js\"></script>\n<textarea id=\"left\" autocomplete=\"off\" spellcheck=\"false\">\n-- Renderers for Sprites\nrenderer Example circle,30,'red'\nrenderer Smile rectangle,40,40,'blue'|smileyFace,20,'white'\n\n-- Sprites\nsprite \"Test\" with renderer Example at 10,10\nsprite \"Player\" with renderer Smile at 3,1\n\n-- World Effects\neffect bloom enabled\neffect vingette enabled\neffect vingette opacity 0.25\n\n-- Sounds\nsound make CoinPickup \"./coin.mp3\"\nsound play CoinPickup\n\n-- Movement\nstartLoop\n\nifkey W\n    Subtract 3 from Player's y\nendif\nifkey A\n    Subtract 3 from Player's x\nendif\nifkey S\n    Add 3 to Player's y\nendif\nifkey D\n    Add 3 to Player's x\nendif\n\nendLoop\n</textarea>\n<textarea id=\"right\" autocomplete=\"off\" spellcheck=\"false\"></textarea>",
  "settings": {
    "cssImports": [],
    "jsImports": [],
    "color": "#6955c6",
    "borderWidth": 1,
    "title": "Hydranslator | Dumbed-down Hydra (TEXT)",
    "shareCodeWithBrainbase": true
  }
}